/*
@author: {pmallozzi, ecastellano}
RLMonitors
*/



const NumberOfElements = 6
const Unknown = -1//Warning! Since I am not using the goal here, I am using Unknown 
const Nothing = 0 
const Door = 1
const LightSwitch = 2
const Water = 3
const Dirt = 4
const Vase = 5
const Wall = 6
const Goal = -1

const LightOff = 0
const LightOn = 1
const DoorClose = 0
const DoorOpen = 1

const North = 0
const East  = 1
const South = 2
const West  = 3

//Direction of the agent 
range Direction = 0..3

//Light status of the Room 1. 
range LightStatus = 0..1 //Off, On 
//Status of the door in front of the agent (no door in front implies unknown).
range DoorStatus = 0..1 //Close, Open
//Room in which the agent is. 
range RoomStatus = 0..1 //Room 0, Room 1
//Element that is in front/right/left of the Agent. 
range Elements = 0..LightSwitch //Nothing, Door, Water, Light Switch, Dirt, Vase, Wall
range ExtendedElements = -1..LightSwitch

set Observations = {observation.[LightStatus].[DoorStatus].[RoomStatus].[Elements].[Elements].[Elements]}//Left, Front, Right
set AgentActions = {left,right,forward,toggle,switch}

set Alphabet = {Observations,AgentActions}

fluent InFrontOfLightSwitch = <observation.[LightStatus].[DoorStatus].[RoomStatus].[Elements].[LightSwitch].[Elements], Observations\{observation.[LightStatus].[DoorStatus].[RoomStatus].[Elements].[LightSwitch].[Elements]}> initially 0 
fluent NearLightSwitch = <{observation.[LightStatus].[DoorStatus].[RoomStatus].[Elements].[Elements].[LightSwitch],observation.[LightStatus].[DoorStatus].[RoomStatus].[Elements].[LightSwitch].[Elements],observation.[LightStatus].[DoorStatus].[RoomStatus].[LightSwitch].[Elements].[Elements]}, Observations\{observation.[LightStatus].[DoorStatus].[RoomStatus].[Elements].[Elements].[LightSwitch],observation.[LightStatus].[DoorStatus].[RoomStatus].[Elements].[LightSwitch].[Elements],observation.[LightStatus].[DoorStatus].[RoomStatus].[LightSwitch].[Elements].[Elements]}> initially 0 
fluent InFrontOfDoor = <observation.[LightStatus].[DoorStatus].[RoomStatus].[Elements].[Door].[Elements], Observations\{observation.[LightStatus].[DoorStatus].[RoomStatus].[Elements].[Door].[Elements]}> initially 0 
fluent InFrontOfWater = <observation.[LightStatus].[DoorStatus].[RoomStatus].[Elements].[Water].[Elements], Observations\{observation.[LightStatus].[DoorStatus].[RoomStatus].[Elements].[Water].[Elements]}> initially 0 
fluent InFrontOfDirt = <observation.[LightStatus].[DoorStatus].[RoomStatus].[Elements].[Dirt].[Elements], Observations\{observation.[LightStatus].[DoorStatus].[RoomStatus].[Elements].[Dirt].[Elements]}> initially 0 
fluent LightOn = <observation.[LightOn].[DoorStatus].[RoomStatus].[Elements].[Elements].[Elements], Observations\{observation.[LightOn].[DoorStatus].[RoomStatus].[Elements].[Elements].[Elements]}> initially 0 
fluent DoorOpen = <observation.[LightStatus].[DoorOpen].[RoomStatus].[Elements].[Elements].[Elements], Observations\{observation.[LightStatus].[DoorOpen].[RoomStatus].[Elements].[Elements].[Elements]}> initially 0 
fluent Room[r:RoomStatus] = <observation.[LightStatus].[DoorOpen].[r].[Elements].[Elements].[Elements], Observations\{observation.[LightStatus].[DoorStatus].[r].[Elements].[Elements].[Elements]}> initially 0 
fluent NearDoor = <{observation.[LightStatus].[DoorStatus].[RoomStatus].[Elements].[Elements].[Door],observation.[LightStatus].[DoorStatus].[RoomStatus].[Elements].[Door].[Elements],observation.[LightStatus].[DoorStatus].[RoomStatus].[Door].[Elements].[Elements]}, Observations\{observation.[LightStatus].[DoorStatus].[RoomStatus].[Elements].[Elements].[Door],observation.[LightStatus].[DoorStatus].[RoomStatus].[Elements].[Door].[Elements],observation.[LightStatus].[DoorStatus].[RoomStatus].[Door].[Elements].[Elements]}> initially 0 


ltl_property MustToggle = []!( {AgentActions}\{toggle} &&  (InFrontOfDoor && !DoorOpen))
ltl_property MustSwitch = []!( {AgentActions}\{switch} &&  (InFrontOfLightSwitch && !LightOn))
ltl_property DontDrawn = [](forward -> !InFrontOfWater )
ltl_property MustClean = []!({AgentActions}\{clean} && InFrontOfDirt )
ltl_property SwitchAllowed = [](switch -> (InFrontOfLightSwitch && !LightOn))
ltl_property ToggleAllowed = [](toggle -> (InFrontOfDoor && !DoorOpen))
ltl_property CleanAllowed = [](clean -> InFrontOfDirt)
ltl_property EnterRoom1WithLightOn = [](Room[1] -> LightOn)

ltl_property DoNotReturn = [](right -> !(X left))
ltl_property DoNotRotateRightThreeTimes = []!(right -> (X (X right)) &&  (X (X (X (X right)))))
ltl_property DoNotRotateLeftThreeTimes = [](left -> !((X (X left)) && (X (X (X (X left))))))


assert ReachADoor = (InFrontOfDoor)
assert ReachASwitch = (InFrontOfLightSwitch)

assert VisitRoom1 = (Room[1])

assert G = (LightOn && Room[1])

//Defines the alternation between actions and observations.
AGENT = AGENT_OBS,
AGENT_DO = (AgentActions -> AGENT_OBS),
AGENT_OBS = (Observations -> AGENT_DO).

//Restrict the observations of the LightStatus to change whenever you do switch.
LIGHT = (observation.[LightOn].[DoorStatus].[RoomStatus].[Elements].[e:Elements].[Elements] -> LIGHT_ON[e]   | observation.[LightOff].[DoorStatus].[RoomStatus].[Elements].[e:Elements].[Elements] -> LIGHT_OFF[e]),  //
LIGHT_OFF[e:Elements] = (when(e==LightSwitch) switch -> LIGHT_ON[e] |
						 when(e!=LightSwitch) switch -> LIGHT_OFF[e] |
						 observation.[LightOff].[DoorStatus].[RoomStatus].[Elements].[f:Elements].[Elements] -> LIGHT_OFF[f]),
LIGHT_ON[e:Elements] = (when(e==LightSwitch) switch -> LIGHT_OFF[e] | 
						when(e!=LightSwitch) switch -> LIGHT_ON[e] |
						observation.[LightOn].[DoorStatus].[RoomStatus].[Elements].[f:Elements].[Elements] -> LIGHT_ON[f]).

//Restrict the observations of the DoorStatus to change whenever you do toggle.
DOOR = (observation.[LightStatus].[DoorOpen].[RoomStatus].[Elements].[e:Elements].[Elements] -> DOOR_OPEN[e] | observation.[LightStatus].[DoorClose].[RoomStatus].[Elements].[e:Elements].[Elements] -> DOOR_CLOSE[e]), 
DOOR_CLOSE[e:Elements] = (when(e==Door) toggle -> DOOR_OPEN[e] |
					      when(e!=Door) toggle -> DOOR_CLOSE[e] | 
						  observation.[LightStatus].[DoorClose].[RoomStatus].[Elements].[f:Elements].[Elements] -> DOOR_CLOSE[f]),
DOOR_OPEN[e:Elements] = (when(e==Door) toggle -> DOOR_CLOSE[e] | 
					     when(e!=Door) toggle -> DOOR_OPEN[e] |
					     observation.[LightStatus].[DoorOpen].[RoomStatus].[Elements].[f:Elements].[Elements] -> DOOR_OPEN[f]).

//When you do forward in front of an open door the RoomStatus change in the observations.
ROOM_CHANGE = (observation.[LightStatus].[d:DoorStatus].[0].[Elements].[e:Elements].[Elements] -> ROOM[0][e][d]),
ROOM[r:RoomStatus][e:Elements][d:DoorStatus] = (when (d==DoorOpen && e==Door && r==0) forward -> DOORWAY[e][d][East]|
												when (d==DoorOpen && e==Door && r==1) forward -> DOORWAY[e][d][West]|
												when (d!=DoorOpen || e!=Door) forward -> ROOM[r][e][d] |
												right -> ROOM[r][e][d] | 
												left -> ROOM[r][e][d] |
												observation.[LightStatus].[d1:DoorStatus].[r].[Elements].[e2:Elements].[Elements] -> ROOM[r][e2][d1]), 
DOORWAY[e:Elements][d:DoorStatus][l:Direction] = (observation.[LightStatus].[DoorOpen].[0].[Nothing].[Nothing].[Nothing] -> DOORWAY[Nothing][DoorOpen][l] |
												right -> DOORWAY[e][d][(l+1) % 4] | 
												left -> DOORWAY[e][d][(l+3) % 4] |
												when (l==East) forward -> ROOM[1][e][d] |
												when (l==West) forward -> ROOM[0][e][d]).

//I think that one of the problems in the rotation module is that I am fixing the observation about the rest of the elements if I do not move.
//This is not true... I could not move, and clean something (changing what is in front)
//TODO: Check what I am getting such a big number of states.. Is it consistent with the number of posibilities in the model?
ROTATE = (observation.[ls:LightStatus].[ds:DoorStatus].[rs:RoomStatus].[l:Elements].[f:Elements].[r:Elements] -> ROTATE[ls][ds][rs][l][f][r][Unknown]),
ROTATE[ls:LightStatus].[ds:DoorStatus].[rs:RoomStatus][l:Elements].[f:Elements].[r:Elements][b:ExtendedElements] = (right -> ROTATE_RIGHT[ls][ds][rs][l][f][r][b] | left -> ROTATE_LEFT[ls][ds][rs][l][f][r][b]
												| observation.[ls2:LightStatus].[ds2:DoorStatus].[rs2:RoomStatus].[l].[f].[r] -> ROTATE[ls2][ds2][rs2][l][f][r][b] 
												| when(f != LightSwitch) forward -> ROTATE), 
ROTATE_LEFT[ls:LightStatus].[ds:DoorStatus].[rs:RoomStatus][l:Elements].[f:Elements][r:Elements][b:ExtendedElements] = ( when (b==Unknown) observation.[ls].[ds].[rs].[x:Elements].[l].[f] -> ROTATE[ls][ds][rs][x][l][f][r] | 
																		 when (b!=Unknown) observation.[LightStatus].[DoorStatus].[RoomStatus].[b].[l].[f] -> ROTATE[ls][ds][rs][b][l][f][r]),
ROTATE_RIGHT[ls:LightStatus].[ds:DoorStatus].[rs:RoomStatus][l:Elements].[f:Elements][r:Elements][b:ExtendedElements] = (when (b==Unknown) observation.[ls].[ds].[rs].[f].[r].[x:Elements] -> ROTATE[ls][ds][rs][f][r][x][l] | 
																		when (b!=Unknown) observation.[ls].[ds].[rs].[f].[r].[b] -> ROTATE[ls][ds][rs][f][r][b][l] ).


//(observation.[LightOff].[DoorClose].[0].[Nothing].[Nothing].[Nothing] -> CONTINUE), 
INIT = (observation.[LightStatus].[DoorStatus].[0].[Elements].[Door].[LightSwitch] -> CONTINUE | observation.[LightStatus].[DoorStatus].[0].[Door].[LightSwitch].[Elements] -> CONTINUE), 
CONTINUE = (observation.[ls:LightStatus].[ds:DoorStatus].[rs:RoomStatus].[l:Elements].[f:Elements].[r:Elements] ->  CONTINUE).


||ENVIRONMENT = (AGENT || LIGHT || DOOR || ROOM_CHANGE || ROTATE || INIT).

||ROTOR = ROTATE.

controller ||C =(ENVIRONMENT)~{Goal}.  

minimal ||CC = (C).

controllerSpec Goal = {
	//safety = {ToggleAllowed, SwitchAllowed, EnterRoom1WithLightOn}//, MustToggle, MustSwitch}//, DoNotReturn}//, DoNotRotateLeftThreeTimes}//, DoNotRotateRightThreeTimes}
	//assumption = {ReachADoor, ReachASwitch}
	liveness = {G}
	reachability	
	controllable = {AgentActions}
} 
