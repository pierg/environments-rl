/*
@author: {pmallozzi, ecastellano}
RLMonitors
*/

const NumberOfElements = 6
const Unknown = -2
const Nothing = 0 
const Door = 1
const LightSwitch = 2
const Water = 3
const Dirt = 4
const Vase = 5
const Wall = 6
const Goal = -1

const LightOff = 0
const LightOn = 1
const DoorClose = 0
const DoorOpen = 1

//Light status of the Room 1. 
range LightStatus = 0..1 //Off, On 
//Status of the door in front of the agent (no door in front implies unknown).
range DoorStatus = 0..1 //Close, Open
//Room in which the agent is. 
range RoomStatus = 0..1 //Room 0, Room 1
//Element that is in front/right/left of the Agent. 
range Elements = -1..NumberOfElements //Nothing, Door, Water, Light Switch, Dirt, Vase, Wall

set Observations = {observation.[LightStatus].[DoorStatus].[RoomStatus].[Elements]}//Left, Front, Right
set AgentActions = {left,right,forward,toggle,switch,clean}
set Alphabet = {Observations,AgentActions}

fluent InFrontOf[e:Elements] = <observation.[LightStatus].[DoorStatus].[RoomStatus].[e], Observations\{observation.[LightStatus].[DoorStatus].[RoomStatus].[e]}> initially 0 
fluent LightOn = <observation.[LightOn].[DoorStatus].[RoomStatus].[Elements], Observations\{observation.[LightOn].[DoorStatus].[RoomStatus].[Elements]}> initially 0 
fluent DoorOpen = <observation.[LightStatus].[DoorOpen].[RoomStatus].[Elements], Observations\{observation.[LightStatus].[DoorOpen].[RoomStatus].[Elements]}> initially 0 

//When to go forward
ltl_property SafeForward = [](forward -> InFrontOf[Nothing] || (InFrontOf[Door] && DoorOpen && LightOn) || InFrontOf[Goal])
ltl_property StepOnGoal = []!({AgentActions}\{forward} && InFrontOf[Goal])

//When to clean
ltl_property MustClean = []!({AgentActions}\{clean} && InFrontOf[Dirt] )
ltl_property CleanAllowed = [](clean -> InFrontOf[Dirt])

//When to toggle
ltl_property MustToggle = []!({AgentActions}\{toggle} &&  (InFrontOf[Door] && !DoorOpen))
ltl_property ToggleAllowed = [](toggle -> (InFrontOf[Door] && !DoorOpen))

//When to switch
ltl_property MustSwitch = []!({AgentActions}\{switch} &&  (InFrontOf[LightSwitch] && !LightOn))
ltl_property SwitchAllowed = [](switch -> ((InFrontOf[LightSwitch] && !LightOn)))


//Defines the alternation between actions and observations.
AGENT = AGENT_OBS,
AGENT_DO = (AgentActions -> AGENT_OBS),
AGENT_OBS = (Observations -> AGENT_DO).

//Restrict the observations of the LightStatus to change whenever you do switch.
LIGHT = (observation.[LightOn].[DoorStatus].[RoomStatus].[e:Elements] -> LIGHT_ON[e]   | observation.[LightOff].[DoorStatus].[RoomStatus].[e:Elements] -> LIGHT_OFF[e]),  //
LIGHT_OFF[e:Elements] = (when(e==LightSwitch) switch -> LIGHT_ON[e] |
						 when(e!=LightSwitch) switch -> LIGHT_OFF[e] |
						 observation.[LightOff].[DoorStatus].[RoomStatus].[f:Elements] -> LIGHT_OFF[f]),
LIGHT_ON[e:Elements] = (when(e==LightSwitch) switch -> LIGHT_OFF[e] | 
						when(e!=LightSwitch) switch -> LIGHT_ON[e] |
						observation.[LightOn].[DoorStatus].[RoomStatus].[f:Elements] -> LIGHT_ON[f]).

//Restrict the observations of the DoorStatus to change whenever you do toggle.
DOOR = (observation.[LightStatus].[DoorOpen].[RoomStatus].[e:Elements] -> DOOR_OPEN[e] | observation.[LightStatus].[DoorClose].[RoomStatus].[e:Elements] -> DOOR_CLOSE[e]), 
DOOR_CLOSE[e:Elements] = (when(e==Door) toggle -> DOOR_OPEN[e] |
					      when(e!=Door) toggle -> DOOR_CLOSE[e] | 
						  observation.[LightStatus].[DoorClose].[RoomStatus].[f:Elements] -> DOOR_CLOSE[f]),
DOOR_OPEN[e:Elements] = (when(e==Door) toggle -> DOOR_CLOSE[e] | 
					     when(e!=Door) toggle -> DOOR_OPEN[e] |
					     observation.[LightStatus].[DoorOpen].[RoomStatus].[f:Elements] -> DOOR_OPEN[f]).

||ENVIRONMENT = (AGENT). // || LIGHT || DOOR).

controller ||C =(ENVIRONMENT)~{Goal}.  

||CC = (C).

controllerSpec Goal = {
	safety = {SafeForward, MustClean, MustToggle, MustSwitch, StepOnGoal}
	controllable = {AgentActions}
} 
